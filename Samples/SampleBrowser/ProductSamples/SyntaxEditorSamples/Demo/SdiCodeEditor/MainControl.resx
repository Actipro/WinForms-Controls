<root>
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="editor.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="editor.Text" xml:space="preserve">
    <value>using System;
using System.Linq;
using Generics = System.Collections.Generic;

namespace SyntaxEditorDemo {

	using System.Diagnostics;
	using Int32List = Generics.List&lt;int&gt;;

	/// &lt;summary&gt;
	/// Represents the main program class, which contains the entry point of the application.
	/// &lt;/summary&gt;
	public class Program {

		/// &lt;summary&gt;
		/// The main entry point of the application.
		/// &lt;/summary&gt;
		/// &lt;param name="args"&gt;The arguments.&lt;/param&gt;
		public static void Main(string[] args) {

			// Build list of all possible numbers
			var allNumbers = new Generics.List&lt;int&gt;();
			for (int i = 0; i &lt; 25; i++)
				allNumbers.Add(i);

			// Pick 5 random winning numbers
			var random = new Random();
			var randomNumbers = new Int32List();
			while (randomNumbers.Count &lt; 5) {
				int j = random.Next(25);
				if (!randomNumbers.Contains(j))
					randomNumbers.Add(j);
			}

			// Get lists of the winning and losing numbers
			var winningNumbers = randomNumbers.OrderBy(i =&gt; i).ToList();
			var losingNumbers = allNumbers.Where(i =&gt; !randomNumbers.Contains(i)).ToList();

			// Sanity check
			Debug.Assert(winningNumbers.Count + losingNumbers.Count == allNumbers.Count, "Counts do not match");
			for (int i = 0; i &lt; winningNumbers.Count; i++) {
				Debug.Assert(!losingNumbers.Contains(winningNumbers[i]),
					string.Format("The winning number {0} at index {1} was also a losing number", winningNumbers[i], i));
			}

			// Output results
			ConsoleWriter.Write("Winning Numbers: ");
			ConsoleWriter.Write(winningNumbers);
			ConsoleWriter.NewLine();

			ConsoleWriter.Write("Losing Numbers: ");
			ConsoleWriter.Write(losingNumbers);
			ConsoleWriter.NewLine();

			Console.ReadKey();
		}

		/// &lt;summary&gt;
		/// Represents a wrapper class for Console output.
		/// &lt;/summary&gt;
		private static class ConsoleWriter {

			/// &lt;summary&gt;
			/// Writes a new-line to the &lt;see cref="Console"/&gt;.
			/// &lt;/summary&gt;
			public static void NewLine() {
				Console.WriteLine();
			}

			/// &lt;summary&gt;
			/// Writes the specified &lt;paramref name="item"/&gt; to the &lt;see cref="Console"/&gt;.
			/// &lt;/summary&gt;
			/// &lt;typeparam name="T"&gt;The type of the item.&lt;/typeparam&gt;
			/// &lt;param name="item"&gt;The item to write.&lt;/param&gt;
			private static void Write&lt;T&gt;(T item) {
				Console.Write("{0}", item);
			}

			/// &lt;summary&gt;
			/// Writes the specified &lt;paramref name="items"/&gt; to the &lt;see cref="Console"/&gt;.
			/// &lt;/summary&gt;
			/// &lt;typeparam name="T"&gt;The type of the items.&lt;/typeparam&gt;
			/// &lt;param name="items"&gt;The items to write.&lt;/param&gt;
			public static void Write&lt;T&gt;(Generics.IEnumerable&lt;T&gt; items) {
				if (items == null)
					return;

				bool first = true;
				foreach (T item in items) {
					if (first)
						first = false;
					else
						Write(", ");

					Write(item);
				}
			}

			/// &lt;summary&gt;
			/// Writes the specified string to the &lt;see cref="Console"/&gt;.
			/// &lt;/summary&gt;
			/// &lt;param name="str"&gt;The string to write.&lt;/param&gt;
			public static void Write(string str) {
				Console.Write(str);
			}

			// This syntax language implementation is part of the .NET Languages Add-on 
			// for SyntaxEditor, which is optional and sold separately from SyntaxEditor.
			
		}

	}
}
</value>
  </data>
  <metadata name="dockManager.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>101, 17</value>
  </metadata>
  <metadata name="mainToolStrip.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>228, 17</value>
  </metadata>
  <metadata name="statusStrip.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>356, 17</value>
  </metadata>
  <metadata name="menuStrip.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>465, 17</value>
  </metadata>
</root>