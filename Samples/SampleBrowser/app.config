<?xml version="1.0"?>
<configuration>
	<startup>
		<supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.8"/>
	</startup>
	<System.Windows.Forms.ApplicationConfigurationSection>
		<!--
		DpiAwareness in WinForms is a mixed experience but one that is improving with newer releases of .NET, especially
		beginning with .NET 6.  While Actipro WinForms controls support per-monitor DPI awareness (PerMonitorV2), the
		Sample Browser itself is not optimized for per-monitor DPI since the project must run consistently across multiple
		.NET targets where each framework can exhibit slightly different behavior with automatic scaling of controls.
		
		DpiAwareness of "system" will scale controls based on the DPI of the primary monitor and is a highly consistent
		experience when all monitors have the same DPI, but the operating system will perform bitmap scaling of the UI,
		as appropriate, when displayed on a monitor whose DPI does not match the system DPI.
		
		The Sample Browser project can be changed to DpiAwareness of "PerMonitorV2" to evaluate the individual controls,
		but some scaling issues may be present with the environment that hosts the controls for demonstration.
		
		NOTE: The "app.config" setting is for .NET Framework only.  To change DpiAwareness for .NET Core or .NET 6+,
		change the "Application.SetHighDpiMode" method call within "Main" method of "Program.cs".
		-->
		<add key="DpiAwareness" value="system" />
	</System.Windows.Forms.ApplicationConfigurationSection>
	<appSettings>
		<add key="EnableWindowsFormsHighDpiAutoResizing" value="true" />
	</appSettings>
</configuration>
